[
    [
        "function_str",
        "def subjectinfo(subject_id):\n    import pandas\n    from os.path import join as opj\n    from nipype.interfaces.base import Bunch\n    trialinfo = pandas.read_csv(\"/home/brain/Documents/data/main_data/sub-{}/func/sub-{}_task-empatom_events.tsv\".format(subject_id, subject_id), sep = '\\t')\n    trialinfo.head()\n\n    conditions = []\n    onsets = []\n    durations = []\n\n    for group in trialinfo.groupby('trial_type'):\n        conditions.append(group[0])\n        onsets.append(group[1].onset.tolist())\n        durations.append(group[1].duration.tolist())\n\n    confounds = pandas.read_csv(\"/home/brain/Documents/data/main_data/derivatives/fmriprep/sub-{}/func/sub-{}_task-empatom_desc-confounds_regressors.tsv\".format(subject_id, subject_id), sep = '\\t')\n\n    subject_info = [Bunch(conditions=conditions,\n                          onsets=onsets,\n                          durations=durations,\n                          # To Do: Are these all confounders that I need?\n                          regressors=[#list(confounds.FramewiseDisplacement.fillna(0)), #what does this do exactly?\n                                      # 6 motion parameters:\n                                      list(confounds.trans_x),\n                                      list(confounds.trans_y),\n                                      list(confounds.trans_z),\n                                      list(confounds.rot_x),\n                                      list(confounds.rot_y),\n                                      list(confounds.rot_z),\n                                      #list(confounds.global_signal)\n                          ],\n                          regressor_names=['trans_x',\n                                          'trans_y',\n                                          'trans_z',\n                                          'rot_x',\n                                          'rot_y',\n                                          'rot_z',\n                                          #'global_signal'\n                                          ]\n\n                         )]\n    return subject_info  # this output will later be returned to infosource\n"
    ],
    [
        "subject_id",
        "04"
    ],
    [
        "needed_outputs",
        [
            "subject_info"
        ]
    ]
]